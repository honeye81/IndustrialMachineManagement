@page "/"
@rendermode @(new InteractiveServerRenderMode())
@using IndustrialMachineManagement.Models
@using IndustrialMachineManagement.Services
@inject IMachineService MachineService

<div class="page-container">
    <!-- Top Navigation -->
    <div class="top-nav">
        <div class="left-nav">
            <span class="brand">Management Central</span>
            <span class="nav-item">Dashboard</span>
        </div>
        <div class="right-nav">
            <button class="icon-button">💬</button>
            <button class="icon-button">📊</button>
            <button class="icon-button">⚙️</button>
            <span class="manager">Manager</span>
        </div>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <h2>Dashboard</h2>
        <p class="subtitle">Overview of your Internet of Things</p>

        <div class="dashboard-grid">
            <!-- Daily Stats Card -->
            <div class="stats-card">
                <div class="card-header">
                    <span>Daily Stats</span>
                    <button class="refresh-button">🔄</button>
                </div>
                <div class="stats-content">
                    <div class="stat-item">
                        <span class="stat-icon">📱</span>
                        <div class="stat-info">
                            <span>Total Devices</span>
                            <div class="stat-value">@(_machines?.Count ?? 0)</div>
                        </div>
                    </div>
                    <div class="stat-item">
                        <span class="stat-icon">➕</span>
                        <div class="stat-info">
                            <span>New Devices</span>
                            <div class="stat-value">@(_machines?.Count(m => m.LastDataReceived.Date == DateTime.Today) ?? 0)</div>
                        </div>
                    </div>
                    <div class="stat-item">
                        <span class="stat-icon">📈</span>
                        <div class="stat-info">
                            <span>C2D Count</span>
                            <div class="stat-value">@(_machines?.Count(m => m.IsOnline) ?? 0)</div>
                        </div>
                    </div>
                </div>
                <div class="stats-chart"></div>
            </div>

            <!-- Devices List Card -->
            <div class="devices-card">
                <div class="card-header">
                    <span>List of Devices</span>
                    <button class="new-device-button" @onclick="AddNewMachineAsync">New Device</button>
                </div>
                <table class="devices-table">
                    <thead>
                        <tr>
                            <th>DeviceId</th>
                            <th>Location</th>
                            <th>Date</th>
                            <th>Type</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (_machines != null)
                        {
                            @foreach (var machine in _machines)
                            {
                                <tr>
                                    <td class="device-id">@machine.Id</td>
                                    <td>Vega station</td>
                                    <td>@machine.LastDataReceived.ToString("yyyy-MM-dd")</td>
                                    <td>Weather Sensor temperature, humidity</td>
                                    <td>
                                        <span class="status-badge @(machine.IsOnline ? "online" : "offline")">
                                            @(machine.IsOnline ? "online" : "offline")
                                        </span>
                                    </td>
                                    <td>
                                        <div class="action-buttons">
                                            <button class="action-btn" @onclick="() => ToggleMachineStatusAsync(machine.Id)">⚡</button>
                                            <button class="action-btn" type="button" @onclick="(async () => await UpdateMachineDataAsync(machine.Id))">✏️</button>
                                            <button class="action-btn" @onclick="() => DeleteMachineAsync(machine.Id)">🗑️</button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<style>
    .page-container {
        background-color: #f8f9fa;
        min-height: 100vh;
    }

    .top-nav {
        background: white;
        padding: 1rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #eee;
    }

    .left-nav {
        display: flex;
        gap: 1rem;
        align-items: center;
    }

    .right-nav {
        display: flex;
        gap: 1rem;
        align-items: center;
    }

    .main-content {
        padding: 2rem;
    }

    .subtitle {
        color: #666;
        margin-top: 0.5rem;
    }

    .dashboard-grid {
        display: grid;
        grid-template-columns: 300px 1fr;
        gap: 2rem;
        margin-top: 2rem;
    }

    .stats-card, .devices-card {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .card-header {
        padding: 1rem;
        border-bottom: 1px solid #eee;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .stats-content {
        padding: 1rem;
    }

    .stat-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 0.75rem 0;
        border-bottom: 1px solid #eee;
    }

    .stats-chart {
        height: 100px;
        background: linear-gradient(180deg, rgba(255,198,0,0.2) 0%, rgba(255,198,0,0.1) 100%);
        border-radius: 0 0 8px 8px;
    }

    .new-device-button {
        background: #673ab7;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 4px;
        cursor: pointer;
    }

    .devices-table {
        width: 100%;
        border-collapse: collapse;
    }

    .devices-table th,
    .devices-table td {
        padding: 0.75rem 1rem;
        text-align: left;
        border-bottom: 1px solid #eee;
    }

    .device-id {
        font-family: monospace;
        font-size: 0.9rem;
        color: #666;
    }

    .status-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 12px;
        font-size: 0.875rem;
    }

    .status-badge.online {
        background-color: #d4edda;
        color: #155724;
    }

    .status-badge.offline {
        background-color: #f8d7da;
        color: #721c24;
    }

    .action-buttons {
        display: flex;
        gap: 0.5rem;
    }

    .action-btn {
        background: none;
        border: none;
        cursor: pointer;
        padding: 0.25rem;
    }

    .icon-button {
        background: none;
        border: none;
        cursor: pointer;
        padding: 0.5rem;
    }
</style>


@code {
    private List<Machine>? _machines;

    protected override async Task OnInitializedAsync()
    {
        await LoadMachinesAsync();
    }

    private async Task LoadMachinesAsync()
    {
        _machines = await MachineService.GetAllMachinesAsync();
        StateHasChanged();
    }

    private async Task AddNewMachineAsync()
    {
        var machine = new Machine
            {
                Name = $"Device {(_machines?.Count ?? 0) + 1}",
                IsOnline = true,
                LastDataReceived = DateTime.Now,
                LastData = "Temperature: 25°C, Humidity: 60%"
            };

        await MachineService.AddMachineAsync(machine);
        await LoadMachinesAsync();
    }

    private async Task ToggleMachineStatusAsync(Guid id)
    {
        await MachineService.ToggleMachineStatusAsync(id);
        await LoadMachinesAsync();
    }

    private async Task UpdateMachineDataAsync(Guid id)
    {
        try
        {
            var temp = Random.Shared.Next(20, 30);
            var humidity = Random.Shared.Next(40, 80);
            var newData = $"Temperature: {temp}°C%";

            var result = await MachineService.UpdateMachineDataAsync(id, newData);
            if (result)
            {
                await LoadMachinesAsync();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating machine: {ex.Message}");
        }
    }

    private async Task DeleteMachineAsync(Guid id)
    {
        await MachineService.DeleteMachineAsync(id);
        await LoadMachinesAsync();
    }

}
