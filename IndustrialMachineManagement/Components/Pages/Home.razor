@page "/"
@using IndustrialMachineManagement.Models
@using IndustrialMachineManagement.Services
@inject IMachineService MachineService

<div class="management-central">
    <div class="management-header">
        <h1>Management Central</h1>
        <div class="nav-icons">
            <span class="nav-icon"><i class="bi bi-chat"></i></span>
            <span class="nav-icon"><i class="bi bi-bar-chart"></i></span>
            <span class="nav-icon"><i class="bi bi-gear"></i></span>
        </div>
    </div>

    <div class="dashboard-section">
        <h2>Dashboard</h2>
        <p class="subtitle">Overview of your Internet of Things</p>
        <p class="user-type">Manager User</p>

        <div class="dashboard-content">
            <!-- Daily Stats -->
            <div class="stats-card">
                <div class="card-header">
                    <h3>Daily Stats</h3>
                    <button class="refresh-btn" @onclick="LoadMachinesAsync">
                        <i class="bi bi-arrow-clockwise"></i>
                    </button>
                </div>

                <div class="stats-list">
                    <div class="stat-item">
                        <i class="bi bi-cpu"></i>
                        <div class="stat-info">
                            <span>Total Devices</span>
                            <h4>@(_machines?.Count ?? 0)</h4>
                        </div>
                    </div>
                    <div class="stat-item">
                        <i class="bi bi-plus-circle"></i>
                        <div class="stat-info">
                            <span>New Devices</span>
                            <h4>@(_machines?.Count(m => m.LastDataReceived.Date == DateTime.Today) ?? 0)</h4>
                        </div>
                    </div>
                    <div class="stat-item">
                        <i class="bi bi-graph-up"></i>
                        <div class="stat-info">
                            <span>C2D Count</span>
                            <h4>@(_machines?.Count(m => m.IsOnline) ?? 0)</h4>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Devices List -->
            <div class="devices-card">
                <div class="card-header">
                    <h3>List of Devices</h3>
                    <button class="new-device-btn" @onclick="AddNewMachineAsync">New Device</button>
                </div>

                <div class="table-container">
                    <table class="devices-table">
                        <thead>
                            <tr>
                                <th>DeviceId</th>
                                <th>Location</th>
                                <th>Date</th>
                                <th>Type</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (_machines != null)
                            {
                                @foreach (var machine in _machines)
                                {
                                    <tr>
                                        <td>@machine.Id</td>
                                        <td>Stockholm</td>
                                        <td>@machine.LastDataReceived.ToString("yyyy-MM-dd")</td>
                                        <td>Weather Sensor</td>
                                        <td>
                                            <span class="status-badge @(machine.IsOnline ? "online" : "offline")">
                                                @(machine.IsOnline ? "online" : "offline")
                                            </span>
                                        </td>
                                        <td>
                                            <div class="action-buttons">
                                                <button class="action-btn" @onclick="() => ToggleMachineStatusAsync(machine.Id)">
                                                    <i class="bi bi-power"></i>
                                                </button>
                                                <button class="action-btn" @onclick="() => UpdateMachineDataAsync(machine.Id)">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                                <button class="action-btn" @onclick="() => DeleteMachineAsync(machine.Id)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Machine>? _machines;

    protected override async Task OnInitializedAsync()
    {
        await LoadMachinesAsync();
    }

    private async Task LoadMachinesAsync()
    {
        _machines = await MachineService.GetAllMachinesAsync();
        StateHasChanged();
    }

    private async Task AddNewMachineAsync()
    {
        var machine = new Machine
            {
                Name = $"Device {(_machines?.Count ?? 0) + 1}",
                IsOnline = true,
                LastDataReceived = DateTime.Now,
                LastData = "Temperature: 25°C, Humidity: 60%"
            };

        await MachineService.AddMachineAsync(machine);
        await LoadMachinesAsync();
    }

    private async Task ToggleMachineStatusAsync(Guid id)
    {
        await MachineService.ToggleMachineStatusAsync(id);
        await LoadMachinesAsync();
    }

    private async Task UpdateMachineDataAsync(Guid id)
    {
        var temp = Random.Shared.Next(20, 30);
        var humidity = Random.Shared.Next(40, 80);
        var newData = $"Temperature: {temp}°C, Humidity: {humidity}%";
        await MachineService.UpdateMachineDataAsync(id, newData);
        await LoadMachinesAsync();
    }

    private async Task DeleteMachineAsync(Guid id)
    {
        await MachineService.DeleteMachineAsync(id);
        await LoadMachinesAsync();
    }
}
